#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set et sw=4 fenc=utf-8:
#
# Copyright 2016 INVITE Communications Co., Ltd. All Rights Reserved.
# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""AGI script that renders speech to text using Google Cloud Speech API
 using the REST API."""

# [START import_libraries]
import base64
import httplib2
import json
import logging
import os
import sys
import tempfile

from asterisk.agi import *
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials
# [END import_libraries]

# [START USER SETTINGS]
# ** Permissions of file are IMPORTANT **
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/home/google_voice_api.json'
# [END USER SETTINGS]

# [ENFORCE utf-8]
reload(sys)
sys.setdefaultencoding("utf-8")

# [START authenticating]
DISCOVERY_URL = ('https://{api}.googleapis.com/$discovery/rest?'
                 'version={apiVersion}')

# Application default credentials provided by env variable
# GOOGLE_APPLICATION_CREDENTIALS

def get_speech_service():
    credentials = GoogleCredentials.get_application_default().create_scoped(
        ['https://www.googleapis.com/auth/cloud-platform'])
    http = httplib2.Http()
    credentials.authorize(http)

    return discovery.build(
        'speech', 'v1beta1', http=http, discoveryServiceUrl=DISCOVERY_URL)
# [END authenticating]

def main(speech_file):
    """Transcribe the given audio file.

    Args:
        speech_file: the name of the audio file.
    """
    # [START construct_request]
    with open(speech_file, 'rb') as speech:
        # Base64 encode the binary audio file for inclusion in the JSON
        # request.
        speech_content = base64.b64encode(speech.read())
	
    #agi.verbose('PROCESSING')
    service = get_speech_service()
    service_request = service.speech().syncrecognize(
        body={
            'config': {
                # There are a bunch of config options you can specify. See
                # https://goo.gl/EPjAup for the full list.
                'encoding': 'MULAW',  # raw 16-bit signed LE samples
                'sampleRate': 8000,  # 16 khz
                # See https://goo.gl/DPeVFW for a list of supported languages.
                'languageCode': 'en-US',  # a BCP-47 language tag 
            },
            'audio': {
                'content': speech_content.decode('UTF-8')
                }
            })
    # [END construct_request]
    # [START send_request]
    response = service_request.execute()
    return response
    # [END send_request]

# [START application]

# Create Temporary File Name    
temp = tempfile.NamedTemporaryFile()
temp.close()

# Start AGI
agi = AGI()
agi.answer()
agi.verbose("Speech Recognition Started")

# AGI Record Variables
filename = temp.name
format = 'ulaw'
intkey = '#'
timeout = 20000
beep = 'beep'
offset = '0'
silence = 's=10'

# Using GENERIC agi.execute command.  
# agi.record in pyst2 does not have silence detencion option.
#
agi.execute('RECORD FILE', (filename), (format), (intkey), (timeout), (offset), (beep), (silence))
# agi.record_file((filename), (format))

# Process Recorded Audio File
response_data = main(temp.name + '.ulaw')

# Extra Logging of JSON response
logging.basicConfig(filename='/var/log/google_speech_json.log',level=logging.DEBUG)
logging.debug(json.dumps(response_data, ensure_ascii=False))

# Extract 'transcript' from JSON results
string = response_data['results'][0]['alternatives'][0]['transcript']
# ENSURE utf-8
res = string.encode('utf8', 'replace')

# Pass Results to Asterisk Log
agi.verbose('The text you just said is: %s' % res)

# Set ${RESPONSE} in the Asterisk Dial Plan
agi.set_variable('RESPONSE', res)

# [END application]